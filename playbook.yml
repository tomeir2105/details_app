---
- name: Deploy details_app on remote Debian servers
  hosts: details_app_server
  become: true
  gather_facts: true

  vars:
    app_user: docker
    app_home: /home/docker/details_app
    service_file_src: files/details_app.service
    service_name: details_app.service
    ssh_key_path: ~/.ssh/id_ansible

  pre_tasks:
    - name: Generate SSH key on control node if not present
      delegate_to: localhost
      run_once: true
      ansible.builtin.openssh_keypair:
        path: "{{ ssh_key_path }}"
        type: rsa
        size: 4096
      register: ssh_key

    - name: Read public SSH key content
      delegate_to: localhost
      run_once: true
      ansible.builtin.slurp:
        src: "{{ ssh_key_path }}.pub"
      register: public_key_content

  tasks:
    - name: Ensure app user '{{ app_user }}' exists
      ansible.builtin.user:
        name: "{{ app_user }}"
        state: present
        create_home: yes
        shell: /bin/bash

    - name: Add control node public key to authorized_keys for '{{ app_user }}'
      ansible.builtin.authorized_key:
        user: "{{ app_user }}"
        state: present
        key: "{{ public_key_content.content | b64decode }}"

    - name: Install Python3 and pip on Debian
      ansible.builtin.apt:
        name:
          - python3
          - python3-pip
          - python3-venv
        state: present
        update_cache: yes

    - name: Create app directory
      ansible.builtin.file:
        path: "{{ app_home }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    - name: Copy Flask app files to remote host
      ansible.builtin.copy:
        src: details_app/
        dest: "{{ app_home }}/"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'
      notify:
        - Restart details_app service

    - name: Install app dependencies with pip
      ansible.builtin.pip:
        requirements: "{{ app_home }}/requirements.txt"
        executable: pip3
        virtualenv: "{{ app_home }}/venv"
        virtualenv_python: python3
        virtualenv_command: python3 -m venv
        virtualenv_site_packages: no
        state: present
      become_user: "{{ app_user }}"

    - name: Copy systemd service file
      ansible.builtin.copy:
        src: "{{ service_file_src }}"
        dest: "/etc/systemd/system/{{ service_name }}"
        owner: root
        group: root
        mode: '0644'
      notify:
        - Reload systemd
        - Restart details_app service

    - name: Enable and start the details_app service
      ansible.builtin.systemd:
        name: "{{ service_name }}"
        enabled: yes
        state: started

  handlers:
    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Restart details_app service
      ansible.builtin.systemd:
        name: "{{ service_name }}"
        state: restarted

  post_tasks:
    - name: Reboot the remote server to verify startup on boot
      ansible.builtin.reboot:
        reboot_timeout: 300
        test_command: systemctl is-active {{ service_name }}

    - name: Wait for port 8000 to be open on remote server
      ansible.builtin.wait_for:
        host: "{{ inventory_hostname }}"
        port: 8000
        timeout: 60
        state: started

    - name: Verify the details_app is up by checking /health endpoint
      ansible.builtin.uri:
        url: "http://{{ inventory_hostname }}:8000/health"
        return_content: yes
        status_code: 200
      register: health_response

    - name: Show health endpoint response
      ansible.builtin.debug:
        msg: "Health check response from {{ inventory_hostname }}: {{ health_response.content }}"
