---
- name: Deploy details_app on remote Debian servers
  hosts: details_app_server
  become: yes
  gather_facts: yes

  pre_tasks:
    - name: Check that remote OS is Debian-based
      ansible.builtin.assert:
        that:
          - ansible_facts['os_family'] == "Debian"
        fail_msg: "Target host is not Debian based. Aborting."

  tasks:
    - name: Create details_app user if not present
      ansible.builtin.user:
        name: docker
        shell: /bin/bash
        create_home: yes
      when: ansible_facts['getent_passwd']['docker'] is not defined

    - name: Ensure /home/docker/details_app directory exists
      ansible.builtin.file:
        path: /home/docker/details_app
        state: directory
        owner: docker
        group: docker
        mode: '0755'

    - name: Copy details_app source code to remote
      ansible.builtin.copy:
        src: details_app/
        dest: /home/docker/details_app/
        owner: docker
        group: docker
        mode: '0755'

    - name: Install python3, pip, and python3-venv
      ansible.builtin.apt:
        name:
          - python3
          - python3-pip
          - python3-venv
        state: present
        update_cache: yes

    - name: Create python virtual environment
      ansible.builtin.command:
        cmd: python3 -m venv /home/docker/details_app/venv
      args:
        creates: /home/docker/details_app/venv/bin/activate
      become_user: docker

    - name: Install python requirements in venv
      ansible.builtin.pip:
        requirements: /home/docker/details_app/requirements.txt
        virtualenv: /home/docker/details_app/venv
        virtualenv_python: python3
      become_user: docker

    - name: Copy systemd service file
      ansible.builtin.copy:
        src: files/details_app.service
        dest: /etc/systemd/system/details_app.service
        owner: root
        group: root
        mode: '0644'

    - name: Reload systemd daemon
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Enable and start details_app service
      ansible.builtin.systemd:
        name: details_app.service
        enabled: yes
        state: started

    - name: Wait for details_app service to be responsive
      ansible.builtin.uri:
        url: http://localhost:8000/health
        status_code: 200
        timeout: 10
      register: health_check
      retries: 5
      delay: 5
      until: health_check.status == 200

    - name: Reboot remote server to test service persistence
      ansible.builtin.reboot:
        reboot_timeout: 300

    - name: Wait for SSH after reboot
      ansible.builtin.wait_for:
        port: 22
        host: "{{ inventory_hostname }}"
        timeout: 300
        state: started

    - name: Verify details_app service is running after reboot
      ansible.builtin.systemd:
        name: details_app.service
        state: started
        enabled: yes

    - name: Check application health endpoint after reboot
      ansible.builtin.uri:
        url: http://localhost:8000/health
        status_code: 200
        timeout: 10
      register: health_check_after_reboot
      retries: 5
      delay: 5
      until: health_check_after_reboot.status == 200
